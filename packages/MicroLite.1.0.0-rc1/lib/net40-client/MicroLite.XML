<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MicroLite</name>
    </assembly>
    <members>
        <member name="T:MicroLite.Mapping.ColumnAttribute">
            <summary>
            An attribute which can be applied to a property to specify the column name that the property maps to.
            </summary>
        </member>
        <member name="M:MicroLite.Mapping.ColumnAttribute.#ctor(System.String)">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.Mapping.ColumnAttribute"/> class.
            </summary>
            <param name="name">The name of the column in the database table that the property maps to.</param>
        </member>
        <member name="P:MicroLite.Mapping.ColumnAttribute.Name">
            <summary>
            Gets the name of the column in the database table that the property maps to
            </summary>
        </member>
        <member name="T:MicroLite.Configuration.Configure">
            <summary>
            The class used to configure the MicroLite ORM framework.
            </summary>
        </member>
        <member name="T:MicroLite.Configuration.IConfigureConnection">
            <summary>
            The interface which specifies the options for configuring the connection in the fluent configuration
            of the MicroLite ORM framework.
            </summary>
        </member>
        <member name="T:MicroLite.IHideObjectMethods">
            <summary>
            An interface used to hide the 4 System.Object instance methods from the API in Visual Studio intellisense.
            </summary>
        </member>
        <member name="M:MicroLite.IHideObjectMethods.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MicroLite.IHideObjectMethods.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:MicroLite.IHideObjectMethods.GetType">
            <summary>
            Gets the type.
            </summary>
            <returns>The type of the object.</returns>
        </member>
        <member name="M:MicroLite.IHideObjectMethods.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:MicroLite.Configuration.IConfigureConnection.ForConnection(System.String)">
            <summary>
            Specifies the named connection string in the app config to be used.
            </summary>
            <param name="connectionName">The name of the connection string in the app config.</param>
            <returns>The next step in the fluent configuration.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionName is null.</exception>
            <exception cref="T:MicroLite.MicroLiteException">Thrown if the connection is not found in the app config.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if the provider name is not supported.</exception>
        </member>
        <member name="T:MicroLite.Configuration.ICreateSessionFactory">
            <summary>
            The interface which specifies the creation of the <see cref="T:MicroLite.ISessionFactory"/> in the fluent configuration
            of the MicroLite ORM framework.
            </summary>
        </member>
        <member name="M:MicroLite.Configuration.ICreateSessionFactory.CreateSessionFactory">
            <summary>
            Creates the session factory for the configured connection.
            </summary>
            <returns>The session factory for the specified connection.</returns>
        </member>
        <member name="M:MicroLite.Configuration.Configure.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:MicroLite.Configuration.Configure"/> class from being created.
            </summary>
        </member>
        <member name="M:MicroLite.Configuration.Configure.Extensions">
            <summary>
            Enables extensions to be loaded.
            </summary>
            <returns>The interface which provides the extension points.</returns>
        </member>
        <member name="M:MicroLite.Configuration.Configure.Fluently">
            <summary>
            Begins the configuration process using the fluent API.
            </summary>
            <returns>The next step in the fluent configuration.</returns>
        </member>
        <member name="M:MicroLite.Configuration.Configure.CreateSessionFactory">
            <summary>
            Creates the session factory for the configured connection.
            </summary>
            <returns>
            The session factory for the specified connection.
            </returns>
        </member>
        <member name="M:MicroLite.Configuration.Configure.ForConnection(System.String)">
            <summary>
            Specifies the named connection string in the app config to be used.
            </summary>
            <param name="connectionName">The name of the connection string in the app config.</param>
            <returns>
            The next step in the fluent configuration.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionName is null.</exception>
            <exception cref="T:MicroLite.MicroLiteException">Thrown if the connection is not found in the app config.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if the provider name is not supported.</exception>
        </member>
        <member name="T:MicroLite.Configuration.ConfigureExtensions">
            <summary>
            The class used to configure extensions to the MicroLite ORM framework.
            </summary>
        </member>
        <member name="T:MicroLite.Configuration.IConfigureExtensions">
            <summary>
            The interface which specifies the options for configuring extensions to the MicroLite ORM framework.
            </summary>
        </member>
        <member name="M:MicroLite.Configuration.IConfigureExtensions.SetLogResolver(System.Func{System.String,MicroLite.Logging.ILog})">
            <summary>
            Sets the function which can be called by MicroLite to resolve the <see cref="T:MicroLite.Logging.ILog"/> to use.
            </summary>
            <param name="logResolver">The function to resolve an ILog.</param>
        </member>
        <member name="T:MicroLite.Core.SessionFactoryOptions">
            <summary>
            The class used to hold the options for configuring a session factory.
            </summary>
        </member>
        <member name="P:MicroLite.Core.SessionFactoryOptions.ConnectionName">
            <summary>
            Gets or sets the connection name.
            </summary>
        </member>
        <member name="P:MicroLite.Core.SessionFactoryOptions.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
        </member>
        <member name="P:MicroLite.Core.SessionFactoryOptions.ProviderFactory">
            <summary>
            Gets or sets the provider factory.
            </summary>
        </member>
        <member name="T:MicroLite.Listeners.AssignedListener">
            <summary>
            The implementation of <see cref="T:MicroLite.Listeners.IListener"/> for checking the instance identifier value if
            <see cref="T:MicroLite.Mapping.IdentifierStrategy"/>.Assigned is used.
            </summary>
        </member>
        <member name="T:MicroLite.Listeners.Listener">
            <summary>
            Empty implementation of IListener.
            </summary>
            <remarks>
            Provided so that implementations don't have to implement full interface.
            Quite possibly a violation of SRP but it does allow for simplified extensions to the framework.
            </remarks>
        </member>
        <member name="T:MicroLite.Listeners.IListener">
            <summary>
            The interface which exposes hooks into the processing of an object by the MicroLite ORM framework.
            </summary>
        </member>
        <member name="M:MicroLite.Listeners.IListener.AfterInsert(System.Object,System.Object)">
            <summary>
            Invoked after the record for the instance has been inserted into the database.
            </summary>
            <param name="instance">The instance which has been inserted.</param>
            <param name="executeScalarResult">The execute scalar result.</param>
        </member>
        <member name="M:MicroLite.Listeners.IListener.BeforeInsert(System.Object)">
            <summary>
            Invoked before the SqlQuery to insert the record into the database is created.
            </summary>
            <param name="instance">The instance to be inserted.</param>
            <remarks>This is called before IListener.BeforeInsert(sqlQuery).</remarks>
        </member>
        <member name="M:MicroLite.Listeners.IListener.BeforeInsert(System.Type,MicroLite.SqlQuery)">
            <summary>
            Invoked before the SqlQuery to insert the record into the database is executed.
            </summary>
            <param name="forType">The type the query is for.</param>
            <param name="sqlQuery">The SqlQuery to be executed.</param>
            <remarks>This is called after IListener.BeforeInsert(instance).</remarks>
        </member>
        <member name="M:MicroLite.Listeners.IListener.BeforeUpdate(System.Object)">
            <summary>
            Invoked before the SqlQuery to update the record in the database is created.
            </summary>
            <param name="instance">The instance to be updated.</param>
        </member>
        <member name="M:MicroLite.Listeners.Listener.AfterInsert(System.Object,System.Object)">
            <summary>
            Invoked after the record for the instance has been inserted into the database.
            </summary>
            <param name="instance">The instance which has been inserted.</param>
            <param name="executeScalarResult">The execute scalar result.</param>
        </member>
        <member name="M:MicroLite.Listeners.Listener.BeforeInsert(System.Object)">
            <summary>
            Invoked before the SqlQuery to insert the record into the database is created.
            </summary>
            <param name="instance">The instance to be inserted.</param>
        </member>
        <member name="M:MicroLite.Listeners.Listener.BeforeInsert(System.Type,MicroLite.SqlQuery)">
            <summary>
            Invoked before the SqlQuery to insert the record into the database is executed.
            </summary>
            <param name="forType">The type the query is for.</param>
            <param name="sqlQuery">The SqlQuery to be executed.</param>
        </member>
        <member name="M:MicroLite.Listeners.Listener.BeforeUpdate(System.Object)">
            <summary>
            Invoked before the SqlQuery to update the record in the database is created.
            </summary>
            <param name="instance">The instance to be updated.</param>
        </member>
        <member name="T:MicroLite.Core.ConnectionManager">
            <summary>
            The default implementation of <see cref="T:MicroLite.Core.IConnectionManager"/>.
            </summary>
        </member>
        <member name="T:MicroLite.Listeners.GuidListener">
            <summary>
            The implementation of <see cref="T:MicroLite.Listeners.IListener"/> for setting the instance identifier value if
            <see cref="T:MicroLite.Mapping.IdentifierStrategy"/>.Guid is used.
            </summary>
        </member>
        <member name="T:MicroLite.Listeners.IdentityListener">
            <summary>
            The implementation of <see cref="T:MicroLite.Listeners.IListener"/> for setting the instance identifier value if
            <see cref="T:MicroLite.Mapping.IdentifierStrategy"/>.Identity is used.
            </summary>
        </member>
        <member name="T:MicroLite.Core.IObjectBuilder">
            <summary>
            The interface for a class which builds an object instance from the values in a <see cref="T:System.Data.IDataReader"/>.
            </summary>
        </member>
        <member name="M:MicroLite.Core.IObjectBuilder.BuildNewInstance``1(System.Data.IDataReader)">
            <summary>
            Builds the new instance.
            </summary>
            <typeparam name="T">The type of object to be built.</typeparam>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> containing the values to populate the object with.</param>
            <returns>
            The new instance populated with the values from the <see cref="T:System.Data.IDataReader"/>.
            </returns>
        </member>
        <member name="T:MicroLite.Core.ISqlQueryBuilder">
            <summary>
            The interface for a class which builds an <see cref="T:MicroLite.SqlQuery"/> for a object instance.
            </summary>
        </member>
        <member name="M:MicroLite.Core.ISqlQueryBuilder.DeleteQuery(System.Object)">
            <summary>
            Creates a SqlQuery to perform a delete for the given instance.
            </summary>
            <param name="instance">The instance to build the query for.</param>
            <returns>A <see cref="T:MicroLite.SqlQuery"/> to delete a record.</returns>
        </member>
        <member name="M:MicroLite.Core.ISqlQueryBuilder.DeleteQuery(System.Type,System.Object)">
            <summary>
            Creates a SqlQuery to perform a delete for the given identifier.
            </summary>
            <param name="forType">For type.</param>
            <param name="identifier">The identifier value for the target record to delete.</param>
            <returns>A <see cref="T:MicroLite.SqlQuery"/> to delete a record.</returns>
        </member>
        <member name="M:MicroLite.Core.ISqlQueryBuilder.InsertQuery(System.Object)">
            <summary>
            Creates a SqlQuery to perform an insert for the given instance.
            </summary>
            <param name="instance">The instance to build the query for.</param>
            <returns>A <see cref="T:MicroLite.SqlQuery"/> to insert a record.</returns>
        </member>
        <member name="M:MicroLite.Core.ISqlQueryBuilder.Page(MicroLite.SqlQuery,System.Int64,System.Int64)">
            <summary>
            Pages the specified SQL query.
            </summary>
            <param name="sqlQuery">The SQL query.</param>
            <param name="page">The page number to get the results for.</param>
            <param name="resultsPerPage">The number of results to be shown per page.</param>
            <returns>A <see cref="T:MicroLite.SqlQuery"/> to return the paged results of the supplied query.</returns>
        </member>
        <member name="M:MicroLite.Core.ISqlQueryBuilder.SelectQuery(System.Type,System.Object)">
            <summary>
            Creates a SqlQuery to perform a select for the given type and identifier value.
            </summary>
            <param name="forType">The type of object the query is for.</param>
            <param name="identifier">The identifier value for the target record.</param>
            <returns>A <see cref="T:MicroLite.SqlQuery"/> to select a specific record.</returns>
        </member>
        <member name="M:MicroLite.Core.ISqlQueryBuilder.UpdateQuery(System.Object)">
            <summary>
            Creates a SqlQuery to perform an update for the given instance.
            </summary>
            <param name="instance">The instance to build the query for.</param>
            <returns>A <see cref="T:MicroLite.SqlQuery"/> to update a record.</returns>
        </member>
        <member name="T:MicroLite.Core.Messages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:MicroLite.Core.Messages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:MicroLite.Core.Messages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:MicroLite.Core.Messages.ArgumentsCountMismatch">
            <summary>
              Looks up a localized string similar to There are {0} parameters in the SQL statement, however only {1} parameter arguments were supplied..
            </summary>
        </member>
        <member name="P:MicroLite.Core.Messages.MustHaveAtLeast1Result">
            <summary>
              Looks up a localized string similar to There must be at least 1 result per page.
            </summary>
        </member>
        <member name="P:MicroLite.Core.Messages.PagesStartAtOne">
            <summary>
              Looks up a localized string similar to The first page which can be requested is page 1.
            </summary>
        </member>
        <member name="T:MicroLite.Core.ObjectBuilder">
            <summary>
            The default implementation of <see cref="T:MicroLite.Core.IObjectBuilder"/>.
            </summary>
        </member>
        <member name="T:MicroLite.Core.Session">
            <summary>
            The default implementation of <see cref="T:MicroLite.ISession"/>.
            </summary>
        </member>
        <member name="T:MicroLite.ISession">
            <summary>
            The interface which provides the basic methods to map objects to database records.
            </summary>
        </member>
        <member name="M:MicroLite.ISession.BeginTransaction">
            <summary>
            Begins the transaction with the default isolation level of of the connection.
            </summary>
            <returns>The transaction.</returns>
        </member>
        <member name="M:MicroLite.ISession.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Begins the transaction with the supplied isolation level.
            </summary>
            <param name="isolationLevel">The isolation level.</param>
            <returns>The transaction.</returns>
        </member>
        <member name="M:MicroLite.ISession.Delete(System.Object)">
            <summary>
            Deletes the database record for the supplied instance.
            </summary>
            <param name="instance">The instance to delete from the database.</param>
            <returns>true if the object was deleted successfully; otherwise false.</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown if session has been disposed.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if supplied instance is null.</exception>
            <exception cref="T:MicroLite.MicroLiteException">Thrown if there is an error executing the delete command.</exception>
        </member>
        <member name="M:MicroLite.ISession.Fetch``1(MicroLite.SqlQuery)">
            <summary>
            Executes the specified SQL query and returns the matching objects in a list.
            </summary>
            <typeparam name="T">The type of object the query relates to.</typeparam>
            <param name="sqlQuery">The SQL query to execute.</param>
            <returns>The objects that match the query in a list.</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown if session has been disposed.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if supplied SqlQuery is null.</exception>
            <exception cref="T:MicroLite.MicroLiteException">Thrown if there is an error executing the query.</exception>
        </member>
        <member name="M:MicroLite.ISession.Insert(System.Object)">
            <summary>
            Inserts a new database record for the supplied instance.
            </summary>
            <param name="instance">The instance to persist the values for.</param>
            <exception cref="T:System.ObjectDisposedException">Thrown if session has been disposed.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if supplied instance is null.</exception>
            <exception cref="T:MicroLite.MicroLiteException">Thrown if there is an error executing the insert command.</exception>
        </member>
        <member name="M:MicroLite.ISession.Paged``1(MicroLite.SqlQuery,System.Int64,System.Int64)">
            <summary>
            Pages the specified SQL query and returns an <see cref="T:MicroLite.PagedResult`1"/> containing the desired results.
            </summary>
            <typeparam name="T">The type of object the query relates to.</typeparam>
            <param name="sqlQuery">The SQL query to page before executing.</param>
            <param name="page">The page number (supply a 1 for first page).</param>
            <param name="resultsPerPage">The number of results per page.</param>
            <returns>An <see cref="T:MicroLite.PagedResult`1"/> containing the desired results.</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown if session has been disposed.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if supplied SqlQuery is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if page or resultsPerPage are below 1.</exception>
            <exception cref="T:MicroLite.MicroLiteException">Thrown if there is an error executing the query.</exception>
        </member>
        <member name="M:MicroLite.ISession.Single``1(System.Object)">
            <summary>
            Returns the instance of the specified type which corresponds to the row with the supplied identifier
            in the mapped table or null if the identifier values does not exist in the table.
            </summary>
            <typeparam name="T">The type of object.</typeparam>
            <param name="identifier">The record identifier.</param>
            <returns>An instance of the specified type or null if no matching record exists.</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown if session has been disposed.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if supplied instance is null.</exception>
            <exception cref="T:MicroLite.MicroLiteException">Thrown if there is an error executing the query.</exception>
        </member>
        <member name="M:MicroLite.ISession.Update(System.Object)">
            <summary>
            Updates the database record for the supplied instance with the current property values.
            </summary>
            <param name="instance">The instance to persist the values for.</param>
            <exception cref="T:System.ObjectDisposedException">Thrown if session has been disposed.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if supplied instance is null.</exception>
            <exception cref="T:MicroLite.MicroLiteException">Thrown if there is an error executing the update command.</exception>
        </member>
        <member name="P:MicroLite.ISession.Advanced">
            <summary>
            Gets the advanced session operations.
            </summary>
        </member>
        <member name="T:MicroLite.IAdvancedSession">
            <summary>
            The interface which provides access to advanced operations.
            </summary>
            <remarks>
            These operations allow for more advanded use and have been moved to a separate interface to avoid
            cluttering the ISession API.
            </remarks>
        </member>
        <member name="M:MicroLite.IAdvancedSession.Delete(System.Type,System.Object)">
            <summary>
            Deletes the database record for the type with the supplied identifier.
            </summary>
            <param name="type">The type to delete.</param>
            <param name="identifier">The identifier of the record to delete.</param>
            <returns>true if the object was deleted successfully; otherwise false.</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown if session has been disposed.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if supplied type or identifier is null.</exception>
            <exception cref="T:MicroLite.MicroLiteException">Thrown if there is an error executing the delete command.</exception>
        </member>
        <member name="M:MicroLite.IAdvancedSession.Execute(MicroLite.SqlQuery)">
            <summary>
            Executes the specified SQL query.
            </summary>
            <param name="sqlQuery">The SQL query to execute.</param>
            <returns>The number of rows affected by the sql query.</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown if session has been disposed.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if supplied SqlQuery is null.</exception>
            <exception cref="T:MicroLite.MicroLiteException">Thrown if there is an error executing the command.</exception>
        </member>
        <member name="M:MicroLite.IAdvancedSession.ExecuteScalar``1(MicroLite.SqlQuery)">
            <summary>
            Executes the supplied SQL query as a scalar command.
            </summary>
            <typeparam name="T">The type of result to be returned.</typeparam>
            <param name="sqlQuery">The SQL query to execute.</param>
            <returns>The result of the scalar query.</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown if session has been disposed.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if supplied SqlQuery is null.</exception>
            <exception cref="T:MicroLite.MicroLiteException">Thrown if there is an error executing the command.</exception>
        </member>
        <member name="T:MicroLite.Core.SessionFactory">
            <summary>
            The default implementation of <see cref="T:MicroLite.ISessionFactory"/>.
            </summary>
        </member>
        <member name="T:MicroLite.ISessionFactory">
            <summary>
            The interface which specifies the factory options for creating <see cref="T:MicroLite.ISession"/>s.
            </summary>
        </member>
        <member name="M:MicroLite.ISessionFactory.OpenSession">
            <summary>
            Opens a new session to the database.
            </summary>
            <returns>A new session instance.</returns>
        </member>
        <member name="P:MicroLite.ISessionFactory.ConnectionName">
            <summary>
            Gets the name of the connection used by the session factory.
            </summary>
        </member>
        <member name="T:MicroLite.Core.SqlQueryBuilder">
            <summary>
            The implementation of <see cref="T:MicroLite.Core.ISqlQueryBuilder"/> for MsSql server.
            </summary>
        </member>
        <member name="T:MicroLite.Core.Transaction">
            <summary>
            The default implementation of <see cref="T:MicroLite.ITransaction"/>.
            </summary>
        </member>
        <member name="T:MicroLite.ITransaction">
            <summary>
            The interface for a database transaction.
            </summary>
        </member>
        <member name="M:MicroLite.ITransaction.Commit">
            <summary>
            Commits the transaction, applying all changes made within the transaction scope.
            </summary>
            <exception cref="T:MicroLite.MicroLiteException">Thrown if there is an error committing the transaction.</exception>
        </member>
        <member name="M:MicroLite.ITransaction.Rollback">
            <summary>
            Rollbacks the transaction, undoing all changes made within the transaction scope.
            </summary>
            <exception cref="T:MicroLite.MicroLiteException">Thrown if there is an error rolling back the transaction.</exception>
        </member>
        <member name="T:MicroLite.Listeners.ListenerManager">
            <summary>
            The class which manages the IListeners used by the MicroLite ORM framework.
            </summary>
        </member>
        <member name="M:MicroLite.Listeners.ListenerManager.Add``1">
            <summary>
            Adds the listener.
            </summary>
            <typeparam name="T">The type of <see cref="T:MicroLite.Listeners.IListener"/> to add.</typeparam>
        </member>
        <member name="M:MicroLite.Listeners.ListenerManager.Add(System.Func{MicroLite.Listeners.IListener})">
            <summary>
            Adds the specified listener factory.
            </summary>
            <param name="listenerFactory">The listener factory.</param>
            <remarks>This method exists so that we can unit test with Mock IListeners, it should remain internal.</remarks>
        </member>
        <member name="T:MicroLite.Listeners.Messages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:MicroLite.Listeners.Messages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:MicroLite.Listeners.Messages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:MicroLite.Listeners.Messages.Assigned_IdentifierNotSetForInsert">
            <summary>
              Looks up a localized string similar to The object does not have an identifier value set so it cannot be inserted.
            </summary>
        </member>
        <member name="P:MicroLite.Listeners.Messages.Identity_IdentifierSetForInsert">
            <summary>
              Looks up a localized string similar to The object already has an identifier value so it cannot be inserted using the Identity strategy.
            </summary>
        </member>
        <member name="P:MicroLite.Listeners.Messages.IListener_IdentifierNotSetForUpdate">
            <summary>
              Looks up a localized string similar to The object does not have an identifier value set so it cannot be updated.
            </summary>
        </member>
        <member name="T:MicroLite.ObjectInfo">
            <summary>
            The class which describes a type and the table it is mapped to.
            </summary>
        </member>
        <member name="T:MicroLite.Query.IAndOrOrderBy">
            <summary>
            The interface which specifies the and/or methods to extend the where clause in the fluent sql builder syntax.
            </summary>
        </member>
        <member name="T:MicroLite.Query.IOrderBy">
            <summary>
            The interface which specifies the order by method in the fluent sql builder syntax.
            </summary>
        </member>
        <member name="T:MicroLite.Query.IToSqlQuery">
            <summary>
            The interface to end the fluent build syntax.
            </summary>
            <remarks>
            It's a bit of a verbose hack, need to see if I can use cast operators instead somehow...
            </remarks>
        </member>
        <member name="M:MicroLite.Query.IToSqlQuery.ToSqlQuery">
            <summary>
            Creates a <see cref="T:MicroLite.SqlQuery"/> from the values specified.
            </summary>
            <returns>The created <see cref="T:MicroLite.SqlQuery"/>.</returns>
        </member>
        <member name="M:MicroLite.Query.IOrderBy.OrderByAscending(System.String)">
            <summary>
            Orders the results of the query by the specified column in ascending order.
            </summary>
            <param name="column">The column to order by.</param>
            <returns>The next step in the fluent sql builder.</returns>
        </member>
        <member name="M:MicroLite.Query.IOrderBy.OrderByDescending(System.String)">
            <summary>
            Orders the results of the query by the specified column in descending order.
            </summary>
            <param name="column">The column to order by.</param>
            <returns>The next step in the fluent sql builder.</returns>
        </member>
        <member name="M:MicroLite.Query.IAndOrOrderBy.AndWhere(System.String,System.Object[])">
            <summary>
            Adds a predicate as an AND to the where clause of the query.
            </summary>
            <param name="predicate">The predicate.</param>
            <param name="args">The args.</param>
            <returns>The next step in the fluent sql builder.</returns>
        </member>
        <member name="M:MicroLite.Query.IAndOrOrderBy.OrWhere(System.String,System.Object[])">
            <summary>
            Adds a predicate as an OR to the where clause of the query.
            </summary>
            <param name="predicate">The predicate.</param>
            <param name="args">The args.</param>
            <returns>The next step in the fluent sql builder.</returns>
        </member>
        <member name="T:MicroLite.Mapping.IdentifierAttribute">
            <summary>
            An attribute which can be applied to a property to specify that it maps to the row identifier (primary key)
            in the table and also defines the <see cref="P:MicroLite.Mapping.IdentifierAttribute.IdentifierStrategy"/> used to manage the identifier's value.
            </summary>
        </member>
        <member name="M:MicroLite.Mapping.IdentifierAttribute.#ctor(MicroLite.Mapping.IdentifierStrategy)">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.Mapping.IdentifierAttribute"/> class.
            </summary>
            <param name="identifierStrategy">The identifier strategy used to manage the identifier's value.</param>
        </member>
        <member name="P:MicroLite.Mapping.IdentifierAttribute.IdentifierStrategy">
            <summary>
            Gets the identifier strategy used to manage the identifier's value.
            </summary>
        </member>
        <member name="T:MicroLite.Mapping.IdentifierStrategy">
            <summary>
            The supported types of strategy used to manage a row identifier.
            </summary>
        </member>
        <member name="F:MicroLite.Mapping.IdentifierStrategy.Identity">
            <summary>
            The identifier value is generated by the database upon insert by an identity column.
            </summary>
        </member>
        <member name="F:MicroLite.Mapping.IdentifierStrategy.Assigned">
            <summary>
            The identifier value is assigned by user code prior to insert.
            </summary>
        </member>
        <member name="F:MicroLite.Mapping.IdentifierStrategy.Guid">
            <summary>
            The identifier is automatically assigned a new System.Guid as it's value prior to insert.
            </summary>
        </member>
        <member name="T:MicroLite.Query.IFrom">
            <summary>
            The interface which specifies the from method in the fluent sql builder syntax.
            </summary>
        </member>
        <member name="M:MicroLite.Query.IFrom.From(System.String)">
            <summary>
            Specifies the table to perform the query against.
            </summary>
            <param name="table">The name of the table.</param>
            <returns>The next step in the fluent sql builder.</returns>
        </member>
        <member name="T:MicroLite.Mapping.IgnoreAttribute">
            <summary>
            An attribute which can be applied to a property to specify that it should be ignored by the
            MicroLite ORM framework.
            </summary>
        </member>
        <member name="M:MicroLite.Mapping.IgnoreAttribute.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.Mapping.IgnoreAttribute"/> class.
            </summary>
        </member>
        <member name="T:MicroLite.Query.IWhereOrOrderBy">
            <summary>
            The interface which specifies the where method in the fluent sql builder syntax.
            </summary>
        </member>
        <member name="M:MicroLite.Query.IWhereOrOrderBy.Where(System.String,System.Object[])">
            <summary>
            Specifies the where clause for the query.
            </summary>
            <param name="predicate">The predicate.</param>
            <param name="args">The args.</param>
            <returns>The next step in the fluent sql builder.</returns>
        </member>
        <member name="T:MicroLite.Query.IWithParameter">
            <summary>
            The interface which specifies a parameter and argument for a stored procedure in the fluent sql builder syntax.
            </summary>
        </member>
        <member name="M:MicroLite.Query.IWithParameter.WithParameter(System.String,System.Object)">
            <summary>
            Specifies that the stored procedure should be executed the supplied parameter and argument.
            </summary>
            <param name="parameter">The parameter to be added.</param>
            <param name="arg">The argument value for the parameter.</param>
            <returns>The next step in the fluent sql builder.</returns>
        </member>
        <member name="T:MicroLite.Logging.ILog">
            <summary>
            The interface for a framework independant logger.
            </summary>
        </member>
        <member name="M:MicroLite.Logging.ILog.Debug(System.String)">
            <summary>
            Writes the message to the log as a debug statement.
            </summary>
            <param name="message">The message to be logged.</param>
        </member>
        <member name="M:MicroLite.Logging.ILog.Debug(System.String,System.String[])">
            <summary>
            Writes the message to the log as a debug statement.
            </summary>
            <param name="message">The message to be logged.</param>
            <param name="formatArgs">The format args.</param>
        </member>
        <member name="M:MicroLite.Logging.ILog.Error(System.String)">
            <summary>
            Writes the message to the log as an error.
            </summary>
            <param name="message">The message to be logged.</param>
        </member>
        <member name="M:MicroLite.Logging.ILog.Error(System.String,System.String[])">
            <summary>
            Writes the message to the log as an error.
            </summary>
            <param name="message">The message to be logged.</param>
            <param name="formatArgs">The format args.</param>
        </member>
        <member name="M:MicroLite.Logging.ILog.Error(System.String,System.Exception)">
            <summary>
            Writes the message to the log as an error along with the exception that occurred.
            </summary>
            <param name="message">The message to be logged.</param>
            <param name="exception">The exception that occurred.</param>
        </member>
        <member name="M:MicroLite.Logging.ILog.Fatal(System.String)">
            <summary>
            Writes the message to the log as fatal.
            </summary>
            <param name="message">The message to be logged.</param>
        </member>
        <member name="M:MicroLite.Logging.ILog.Fatal(System.String,System.String[])">
            <summary>
            Writes the message to the log as fatal.
            </summary>
            <param name="message">The message to be logged.</param>
            <param name="formatArgs">The format args.</param>
        </member>
        <member name="M:MicroLite.Logging.ILog.Fatal(System.String,System.Exception)">
            <summary>
            Writes the message to the log as fatal along with the exception that occurred.
            </summary>
            <param name="message">The message to be logged.</param>
            <param name="exception">The exception that occurred.</param>
        </member>
        <member name="M:MicroLite.Logging.ILog.Info(System.String,System.String[])">
            <summary>
            Writes the message to the log as information.
            </summary>
            <param name="message">The message to be logged.</param>
            <param name="formatArgs">The format args.</param>
        </member>
        <member name="M:MicroLite.Logging.ILog.Info(System.String)">
            <summary>
            Writes the message to the log as information.
            </summary>
            <param name="message">The message to be logged.</param>
        </member>
        <member name="M:MicroLite.Logging.ILog.Warn(System.String)">
            <summary>
            Writes the message to the log as a warning.
            </summary>
            <param name="message">The message to be logged.</param>
        </member>
        <member name="M:MicroLite.Logging.ILog.Warn(System.String,System.String[])">
            <summary>
            Writes the message to the log as a warning.
            </summary>
            <param name="message">The message to be logged.</param>
            <param name="formatArgs">The format args.</param>
        </member>
        <member name="T:MicroLite.Logging.LogExtensions">
            <summary>
            Extension methods for the <see cref="T:MicroLite.Logging.ILog"/> interface to simplify writing to the log since there is no
            guarantee that an <see cref="T:MicroLite.Logging.ILog"/> is in use.
            </summary>
        </member>
        <member name="M:MicroLite.Logging.LogExtensions.TryLogDebug(MicroLite.Logging.ILog,System.String,System.String[])">
            <summary>
            Writes the message to the log as a debug statement.
            </summary>
            <param name="log">The log to write to.</param>
            <param name="message">The message to be logged.</param>
            <param name="formatArgs">The format args.</param>
        </member>
        <member name="M:MicroLite.Logging.LogExtensions.TryLogError(MicroLite.Logging.ILog,System.String,System.String[])">
            <summary>
            Writes the message to the log as an error.
            </summary>
            <param name="log">The log to write to.</param>
            <param name="message">The message to be logged.</param>
            <param name="formatArgs">The format args.</param>
        </member>
        <member name="M:MicroLite.Logging.LogExtensions.TryLogError(MicroLite.Logging.ILog,System.String,System.Exception)">
            <summary>
            Writes the message to the log as an error along with the exception that occurred.
            </summary>
            <param name="log">The log to write to.</param>
            <param name="message">The message to be logged.</param>
            <param name="exception">The exception that occurred.</param>
        </member>
        <member name="M:MicroLite.Logging.LogExtensions.TryLogFatal(MicroLite.Logging.ILog,System.String,System.String[])">
            <summary>
            Writes the message to the log as fatal.
            </summary>
            <param name="log">The log to write to.</param>
            <param name="message">The message to be logged.</param>
            <param name="formatArgs">The format args.</param>
        </member>
        <member name="M:MicroLite.Logging.LogExtensions.TryLogFatal(MicroLite.Logging.ILog,System.String,System.Exception)">
            <summary>
            Writes the message to the log as fatal along with the exception that occurred.
            </summary>
            <param name="log">The log to write to.</param>
            <param name="message">The message to be logged.</param>
            <param name="exception">The exception that occurred.</param>
        </member>
        <member name="M:MicroLite.Logging.LogExtensions.TryLogInfo(MicroLite.Logging.ILog,System.String,System.String[])">
            <summary>
            Writes the message to the log as information.
            </summary>
            <param name="log">The log to write to.</param>
            <param name="message">The message to be logged.</param>
            <param name="formatArgs">The format args.</param>
        </member>
        <member name="M:MicroLite.Logging.LogExtensions.TryLogWarn(MicroLite.Logging.ILog,System.String,System.String[])">
            <summary>
            Writes the message to the log as a warning.
            </summary>
            <param name="log">The log to write to.</param>
            <param name="message">The message to be logged.</param>
            <param name="formatArgs">The format args.</param>
        </member>
        <member name="T:MicroLite.Logging.LogManager">
            <summary>
            A class which the MicroLite ORM framework can call to resolve an ILog implementation.
            </summary>
        </member>
        <member name="M:MicroLite.Logging.LogManager.GetCurrentClassLog">
            <summary>
            Gets the log for the current (calling) class.
            </summary>
            <returns>The <see cref="T:MicroLite.Logging.ILog"/> for the class which called the method.</returns>
        </member>
        <member name="M:MicroLite.Logging.LogManager.GetLog(System.String)">
            <summary>
            Gets the log instance with the supplied name.
            </summary>
            <param name="name">The name of the log to get.</param>
            <returns>
            The <see cref="T:MicroLite.Logging.ILog"/> for the supplied log name or null if LogManager.GetLogger nas not been set.
            </returns>
        </member>
        <member name="P:MicroLite.Logging.LogManager.GetLogger">
            <summary>
            Gets or sets the function which can be called by MicroLite to resolve the <see cref="T:MicroLite.Logging.ILog"/> to use.
            </summary>
        </member>
        <member name="T:MicroLite.Logging.LogMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:MicroLite.Logging.LogMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:MicroLite.Logging.LogMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:MicroLite.Logging.LogMessages.Configure_ConnectionNotFound">
            <summary>
              Looks up a localized string similar to No connection was found in the app.config with the name {0}.
            </summary>
        </member>
        <member name="P:MicroLite.Logging.LogMessages.Configure_CreatingSessionFactory">
            <summary>
              Looks up a localized string similar to Creating a session factory for connection [{0}].
            </summary>
        </member>
        <member name="P:MicroLite.Logging.LogMessages.Configure_ProviderNotSupported">
            <summary>
              Looks up a localized string similar to The provider {0} is currently not supported by the MicroLite framework.
            </summary>
        </member>
        <member name="P:MicroLite.Logging.LogMessages.Configure_ReadingConnection">
            <summary>
              Looks up a localized string similar to Reading connection named {0} from app.config.
            </summary>
        </member>
        <member name="P:MicroLite.Logging.LogMessages.IListener_SettingIdentifierValue">
            <summary>
              Looks up a localized string similar to Setting the identifier value for an instance of the type {0} to {1}.
            </summary>
        </member>
        <member name="P:MicroLite.Logging.LogMessages.NoIdentifierFoundForType">
            <summary>
              Looks up a localized string similar to The type {0} has no property named &apos;Id&apos;, &apos;{0}Id&apos; or a property with an IdentifierAttribute specified..
            </summary>
        </member>
        <member name="P:MicroLite.Logging.LogMessages.ObjectBuilder_CreatingInstance">
            <summary>
              Looks up a localized string similar to Creating a new instance of {0}.
            </summary>
        </member>
        <member name="P:MicroLite.Logging.LogMessages.ObjectBuilder_SettingPropertyValue">
            <summary>
              Looks up a localized string similar to Setting the property value for {0}.{1}.
            </summary>
        </member>
        <member name="P:MicroLite.Logging.LogMessages.ObjectBuilder_UnknownProperty">
            <summary>
              Looks up a localized string similar to The type {0} does not have a mapped property with the name {1}.
            </summary>
        </member>
        <member name="P:MicroLite.Logging.LogMessages.ObjectInfo_CreatingObjectInfo">
            <summary>
              Looks up a localized string similar to Creating ObjectInfo for {0}.
            </summary>
        </member>
        <member name="P:MicroLite.Logging.LogMessages.ObjectInfo_IgnoringProperty">
            <summary>
              Looks up a localized string similar to Ignoring the property {0}.{1}.
            </summary>
        </member>
        <member name="P:MicroLite.Logging.LogMessages.ObjectInfo_MappingClassToTable">
            <summary>
              Looks up a localized string similar to Mapping the {0} class to the {1} table.
            </summary>
        </member>
        <member name="P:MicroLite.Logging.LogMessages.ObjectInfo_MappingColumnToProperty">
            <summary>
              Looks up a localized string similar to Mapping the {0}.{1} property to the column {2}.
            </summary>
        </member>
        <member name="P:MicroLite.Logging.LogMessages.ObjectInfo_RetrievingObjectInfo">
            <summary>
              Looks up a localized string similar to Retrieving ObjectInfo for {0}.
            </summary>
        </member>
        <member name="P:MicroLite.Logging.LogMessages.ObjectInfo_UsingPropertyAsIdentifier">
            <summary>
              Looks up a localized string similar to Mapping the {0}.{1} property as the identifier with the strategy {2}.
            </summary>
        </member>
        <member name="P:MicroLite.Logging.LogMessages.Session_ClosingConnection">
            <summary>
              Looks up a localized string similar to Session {0} closing database connection.
            </summary>
        </member>
        <member name="P:MicroLite.Logging.LogMessages.Session_Created">
            <summary>
              Looks up a localized string similar to Session {0} created.
            </summary>
        </member>
        <member name="P:MicroLite.Logging.LogMessages.Session_Disposed">
            <summary>
              Looks up a localized string similar to Session {0} disposed.
            </summary>
        </member>
        <member name="P:MicroLite.Logging.LogMessages.Session_OpeningConnection">
            <summary>
              Looks up a localized string similar to Session {0} opening database connection.
            </summary>
        </member>
        <member name="P:MicroLite.Logging.LogMessages.SessionFactory_CreatingSession">
            <summary>
              Looks up a localized string similar to Creating a new session.
            </summary>
        </member>
        <member name="P:MicroLite.Logging.LogMessages.Transaction_Committing">
            <summary>
              Looks up a localized string similar to Transaction {0} committing changes.
            </summary>
        </member>
        <member name="P:MicroLite.Logging.LogMessages.Transaction_Created">
            <summary>
              Looks up a localized string similar to Transaction {0} created.
            </summary>
        </member>
        <member name="P:MicroLite.Logging.LogMessages.Transaction_Disposed">
            <summary>
              Looks up a localized string similar to Transaction {0} disposed.
            </summary>
        </member>
        <member name="P:MicroLite.Logging.LogMessages.Transaction_DisposedUncommitted">
            <summary>
              Looks up a localized string similar to Transaction {0} is being disposed with uncommitted changes.
            </summary>
        </member>
        <member name="P:MicroLite.Logging.LogMessages.Transaction_EnlistingCommand">
            <summary>
              Looks up a localized string similar to Command enlisted in transaction {0}.
            </summary>
        </member>
        <member name="P:MicroLite.Logging.LogMessages.Transaction_RollingBack">
            <summary>
              Looks up a localized string similar to Transaction {0} rolling back changes.
            </summary>
        </member>
        <member name="P:MicroLite.Logging.LogMessages.TypeMustBeClass">
            <summary>
              Looks up a localized string similar to The type {0} is not a class and therefore cannot be used by the MicroLite ORM Framework.
            </summary>
        </member>
        <member name="P:MicroLite.Logging.LogMessages.TypeMustHaveDefaultConstructor">
            <summary>
              Looks up a localized string similar to The type {0} has no default (zero parameter) constructor and therefore cannot be used by the MicroLite ORM Framework.
            </summary>
        </member>
        <member name="P:MicroLite.Logging.LogMessages.TypeMustNotBeAbstract">
            <summary>
              Looks up a localized string similar to The type {0} is abstract and therefore cannot be used by the MicroLite ORM Framework.
            </summary>
        </member>
        <member name="T:MicroLite.MicroLiteException">
            <summary>
            The base exception thrown by the MicroLite ORM framework.
            </summary>
            <remarks>
            This exception will be thrown for exceptions encountered by the MicroLite ORM framework
            or to wrap any exceptions thrown by .net framework classes to allow for consistent error handling.
            </remarks>
        </member>
        <member name="M:MicroLite.MicroLiteException.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.MicroLiteException"/> class.
            </summary>
        </member>
        <member name="M:MicroLite.MicroLiteException.#ctor(System.String)">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.MicroLiteException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:MicroLite.MicroLiteException.#ctor(System.String,System.Exception)">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.MicroLiteException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:MicroLite.MicroLiteException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.MicroLiteException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:MicroLite.PagedResult`1">
            <summary>
            The result of a paged query.
            </summary>
            <typeparam name="T">The type of object the contained in the results.</typeparam>
        </member>
        <member name="M:MicroLite.PagedResult`1.#ctor(System.Int64,System.Collections.Generic.IList{`0})">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.PagedResult`1"/> class.
            </summary>
            <param name="page">The page.</param>
            <param name="results">The results.</param>
        </member>
        <member name="P:MicroLite.PagedResult`1.Page">
            <summary>
            Gets the page number.
            </summary>
        </member>
        <member name="P:MicroLite.PagedResult`1.Results">
            <summary>
            Gets the results in the page.
            </summary>
        </member>
        <member name="T:MicroLite.Query.SqlBuilder">
            <summary>
            A helper class for creating a dynamic <see cref="T:MicroLite.SqlQuery"/>.
            </summary>
        </member>
        <member name="M:MicroLite.Query.SqlBuilder.Execute(System.String)">
            <summary>
            Species the name of the specified procedure to be executed.
            </summary>
            <param name="procedure">The name of the stored procedure.</param>
            <returns>The next step in the fluent sql builder.</returns>
        </member>
        <member name="M:MicroLite.Query.SqlBuilder.Select(System.String[])">
            <summary>
            Selects the specified columns.
            </summary>
            <param name="columns">The columns to be included in the query.</param>
            <returns>The next step in the fluent sql builder.</returns>
        </member>
        <member name="M:MicroLite.Query.SqlBuilder.SelectFrom(System.Type)">
            <summary>
            Selects all mapped columns from the table the supplied type maps to.
            </summary>
            <param name="forType">The type to select the columns for.</param>
            <returns>The next step in the fluent sql builder.</returns>
        </member>
        <member name="M:MicroLite.Query.SqlBuilder.AndWhere(System.String,System.Object[])">
            <summary>
            Adds a predicate as an AND to the where clause of the query.
            </summary>
            <param name="predicate">The predicate.</param>
            <param name="args">The args.</param>
            <returns>The next step in the fluent sql builder.</returns>
        </member>
        <member name="M:MicroLite.Query.SqlBuilder.From(System.String)">
            <summary>
            Specifies the table to perform the query against.
            </summary>
            <param name="table">The name of the table.</param>
            <returns>The next step in the fluent sql builder.</returns>
        </member>
        <member name="M:MicroLite.Query.SqlBuilder.OrderByAscending(System.String)">
            <summary>
            Orders the results of the query by the specified column in ascending order.
            </summary>
            <param name="column">The column to order by.</param>
            <returns>The next step in the fluent sql builder.</returns>
        </member>
        <member name="M:MicroLite.Query.SqlBuilder.OrderByDescending(System.String)">
            <summary>
            Orders the results of the query by the specified column in descending order.
            </summary>
            <param name="column">The column to order by.</param>
            <returns>The next step in the fluent sql builder.</returns>
        </member>
        <member name="M:MicroLite.Query.SqlBuilder.OrWhere(System.String,System.Object[])">
            <summary>
            Adds a predicate as an OR to the where clause of the query.
            </summary>
            <param name="predicate">The predicate.</param>
            <param name="args">The args.</param>
            <returns>The next step in the fluent sql builder.</returns>
        </member>
        <member name="M:MicroLite.Query.SqlBuilder.ToSqlQuery">
            <summary>
            Creates a <see cref="T:MicroLite.SqlQuery"/> from the values specified.
            </summary>
            <returns>The created <see cref="T:MicroLite.SqlQuery"/>.</returns>
        </member>
        <member name="M:MicroLite.Query.SqlBuilder.Where(System.String,System.Object[])">
            <summary>
            Specifies the where clause for the query.
            </summary>
            <param name="predicate">The predicate.</param>
            <param name="args">The args.</param>
            <returns>The next step in the fluent sql builder.</returns>
        </member>
        <member name="M:MicroLite.Query.SqlBuilder.WithParameter(System.String,System.Object)">
            <summary>
            Specifies that the stored procedure should be executed the supplied parameter and argument.
            </summary>
            <param name="parameter">The parameter to be added.</param>
            <param name="arg">The argument value for the parameter.</param>
            <returns>The next step in the fluent sql builder.</returns>
        </member>
        <member name="T:MicroLite.SqlQuery">
            <summary>
            A class which represents a parameterised SQL query.
            </summary>
        </member>
        <member name="M:MicroLite.SqlQuery.#ctor(System.String,System.Object[])">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.SqlQuery"/> class with the supplied command text and parameter values.
            </summary>
            <param name="commandText">The SQL command text.</param>
            <param name="arguments">The parameter values for the query.</param>
        </member>
        <member name="M:MicroLite.SqlQuery.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MicroLite.SqlQuery.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:MicroLite.SqlQuery.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:MicroLite.SqlQuery.Arguments">
            <summary>
            Gets the parameter values of the SQL statement or stored procedure.
            </summary>
        </member>
        <member name="P:MicroLite.SqlQuery.CommandText">
            <summary>
            Gets or sets the SQL statement or stored procedure to execute at the data source.
            </summary>
        </member>
        <member name="T:MicroLite.Mapping.TableAttribute">
            <summary>
            An attribute which can be applied to a class to specify the table name and database schema the table
            exists within.
            </summary>
        </member>
        <member name="M:MicroLite.Mapping.TableAttribute.#ctor(System.String,System.String)">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.Mapping.TableAttribute"/> class.
            </summary>
            <param name="schema">The database schema the table exists within (e.g. 'dbo').</param>
            <param name="name">The name of the table.</param>
        </member>
        <member name="P:MicroLite.Mapping.TableAttribute.Name">
            <summary>
            Gets the name of the table.
            </summary>
        </member>
        <member name="P:MicroLite.Mapping.TableAttribute.Schema">
            <summary>
            Gets the schema the table exists within.
            </summary>
        </member>
    </members>
</doc>
